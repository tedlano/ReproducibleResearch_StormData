ylab = "Mean Number of Steps", main = "Mean number of steps taken at measured time intervals")
```
Get interval with maximum number of steps
```{r}
interval_stepsMax <- data.timeMean[data.timeMean$steps == max(data.timeMean$steps),]$interval
```
## Inputing missing values
Strategy: separate data by day of the week and average the number of steps per given time
interval.  Use these averaged time interval values by day to replace appropriate NA values
Get count of NA values
```{r}
n_NA <- sum(is.na(data$steps))
```
Add day specification (Monday, Tuesday, Wednesday, etc...) to data points
```{r}
data$day <- weekdays(as.Date(data$date))
```
For non NA values, group data by day of the week and time interval, then find means of those groups
```{r}
data.dayInt <- data[complete.cases(data),] %>%
group_by(day, interval) %>%
summarize(meanSteps = mean(steps))
```
Make a copy of data and replace NA values with mean values grouped by day of week and time interval.
For some reason, this command needs to be run twice in order to update all of the NA values.
The last 288 don't get updated the first time, but do the second time.  Programming, am I right?
```{r}
data.replaceNa <- data
data.replaceNa$steps[is.na(data.replaceNa$steps)] <- data.dayInt$meanSteps[
match(data.replaceNa$day, data.dayInt$day)
& match(data.replaceNa$interval, data.dayInt$interval)
]
data.replaceNa$steps[is.na(data.replaceNa$steps)] <- data.dayInt$meanSteps[
match(data.replaceNa$day, data.dayInt$day)
& match(data.replaceNa$interval, data.dayInt$interval)
]
```
Aggregate data by getting mean number of steps per interval
```{r}
data.dateSumReplaceNa <- aggregate(x = data.replaceNa[c("steps")],
FUN = sum,
by = list(date = data.replaceNa$date))
```
Histogram of total steps
```{r}
hist(data.dateSumReplaceNa$steps, 15, xlab = "Total steps per day", main = "Histogram of total steps per day")
```
Get mean and median values of the total steps in a day
```{r}
stepsRepNa_mean <- mean(data.dateSumReplaceNa$steps, na.rm=TRUE)
stepsRepNa_median <- median(data.dateSumReplaceNa$steps, na.rm=TRUE)
```
Both mean and median values increased when replacing NA values with values averaged for
intervals as a function of the day of the week.
By putting in this missing data, we are strengthing the impact of days which contained the most NA values.
Data will skew more towards those days
```{r}
table(data[is.na(data$steps),]$day)
```
## Are there differences in activity patterns between weekdays and weekends?
New variable that indicates if the day is a weekday or a weekend
```{r}
data.replaceNa$weekday <- ifelse(substr(weekdays(as.Date(data.replaceNa$date)), 0,1) != 'S', "weekday", "weekend")
```
Split data from weekdays and weekends
```{r}
data.weekdays <- data.replaceNa[data.replaceNa$weekday == "weekday",]
data.weekends <- data.replaceNa[data.replaceNa$weekday == "weekend",]
data.meanWeekdays <- aggregate(x = data.weekdays[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data.weekdays$interval))
data.meanWeekends <- aggregate(x = data.weekends[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data.weekends$interval))
```
Set Plot Attributes and plot
```{r}
main_text <- "Mean number of steps taken at measured time intervals"
xlab_text <- "Time Interval"
ylab_text <- "Mean Number of Steps"
y_lim <- c(-5, 250)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1), oma = c( 0, 0, 2, 0 ))
plot(data.meanWeekdays$interval, data.meanWeekdays$steps, type = "l", xlab = xlab_text,
ylab = ylab_text, ylim = y_lim, main = "weekdays")
plot(data.meanWeekends$interval, data.meanWeekends$steps, type = "l", xlab = xlab_text,
ylab = ylab_text,ylim = y_lim, main = "weekends")
title( main_text, outer = TRUE )
```
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
library(dplyr)
data <- read.table(unz("./R/R/activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
```
## What is mean total number of steps taken per day?
First, Aggregate data by getting mean total number of steps in a day
```{r}
data.dateSum <- aggregate(x = data[c("steps")],
FUN = sum,
by = list(date = data$date))
```
Create histogram of total steps
```{r}
hist(data.dateSum$steps, 15, xlab = "Total steps in a day", main = "Histogram of total steps in a day")
```
Get mean and median values of the total steps in a day
```{r}
steps_mean <- mean(data.dateSum$steps, na.rm=TRUE)
steps_median <- median(data.dateSum$steps, na.rm=TRUE)
```
## What is the average daily activity pattern?
Aggregate data by getting mean number of steps per interval (most active interval on average)
```{r}
data.timeMean <- aggregate(x = data[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data$interval))
```
Line plot to show mean number of steps at given time intervals
```{r}
plot(data.timeMean$interval, data.timeMean$steps, type = "l", xlab = "Time Interval",
ylab = "Mean Number of Steps", main = "Mean number of steps taken at measured time intervals")
```
Get interval with maximum number of steps
```{r}
interval_stepsMax <- data.timeMean[data.timeMean$steps == max(data.timeMean$steps),]$interval
```
## Inputing missing values
Strategy: separate data by day of the week and average the number of steps per given time
interval.  Use these averaged time interval values by day to replace appropriate NA values
Get count of NA values
```{r}
n_NA <- sum(is.na(data$steps))
```
Add day specification (Monday, Tuesday, Wednesday, etc...) to data points
```{r}
data$day <- weekdays(as.Date(data$date))
```
For non NA values, group data by day of the week and time interval, then find means of those groups
```{r}
data.dayInt <- data[complete.cases(data),] %>%
group_by(day, interval) %>%
summarize(meanSteps = mean(steps))
```
Make a copy of data and replace NA values with mean values grouped by day of week and time interval.
For some reason, this command needs to be run twice in order to update all of the NA values.
The last 288 don't get updated the first time, but do the second time.  Programming, am I right?
```{r}
data.replaceNa <- data
data.replaceNa$steps[is.na(data.replaceNa$steps)] <- data.dayInt$meanSteps[
match(data.replaceNa$day, data.dayInt$day)
& match(data.replaceNa$interval, data.dayInt$interval)
]
data.replaceNa$steps[is.na(data.replaceNa$steps)] <- data.dayInt$meanSteps[
match(data.replaceNa$day, data.dayInt$day)
& match(data.replaceNa$interval, data.dayInt$interval)
]
```
Aggregate data by getting mean number of steps per interval
```{r}
data.dateSumReplaceNa <- aggregate(x = data.replaceNa[c("steps")],
FUN = sum,
by = list(date = data.replaceNa$date))
```
Histogram of total steps
```{r}
hist(data.dateSumReplaceNa$steps, 15, xlab = "Total steps per day", main = "Histogram of total steps per day")
```
Get mean and median values of the total steps in a day
```{r}
stepsRepNa_mean <- mean(data.dateSumReplaceNa$steps, na.rm=TRUE)
stepsRepNa_median <- median(data.dateSumReplaceNa$steps, na.rm=TRUE)
```
Both mean and median values increased when replacing NA values with values averaged for
intervals as a function of the day of the week.
By putting in this missing data, we are strengthing the impact of days which contained the most NA values.
Data will skew more towards those days
```{r}
table(data[is.na(data$steps),]$day)
```
## Are there differences in activity patterns between weekdays and weekends?
New variable that indicates if the day is a weekday or a weekend
```{r}
data.replaceNa$weekday <- ifelse(substr(weekdays(as.Date(data.replaceNa$date)), 0,1) != 'S', "weekday", "weekend")
```
Split data from weekdays and weekends
```{r}
data.weekdays <- data.replaceNa[data.replaceNa$weekday == "weekday",]
data.weekends <- data.replaceNa[data.replaceNa$weekday == "weekend",]
data.meanWeekdays <- aggregate(x = data.weekdays[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data.weekdays$interval))
data.meanWeekends <- aggregate(x = data.weekends[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data.weekends$interval))
```
Set Plot Attributes and plot
```{r}
main_text <- "Mean number of steps taken at measured time intervals"
xlab_text <- "Time Interval"
ylab_text <- "Mean Number of Steps"
y_lim <- c(-5, 250)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1), oma = c( 0, 0, 2, 0 ))
plot(data.meanWeekdays$interval, data.meanWeekdays$steps, type = "l", xlab = xlab_text,
ylab = ylab_text, ylim = y_lim, main = "weekdays")
plot(data.meanWeekends$interval, data.meanWeekends$steps, type = "l", xlab = xlab_text,
ylab = ylab_text,ylim = y_lim, main = "weekends")
title( main_text, outer = TRUE )
```
---
## Loading and preprocessing the data
```{r}
library(dplyr)
data <- read.table(unz("./R/R/activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
old.par <- par(mar = c(0, 0, 0, 0))
```
## What is mean total number of steps taken per day?
First, Aggregate data by getting mean total number of steps in a day
```{r}
data.dateSum <- aggregate(x = data[c("steps")],
FUN = sum,
by = list(date = data$date))
```
Create histogram of total steps
```{r}
hist(data.dateSum$steps, 15, xlab = "Total steps in a day", main = "Histogram of total steps in a day")
```
Get mean and median values of the total steps in a day
```{r}
steps_mean <- mean(data.dateSum$steps, na.rm=TRUE)
steps_median <- median(data.dateSum$steps, na.rm=TRUE)
```
## What is the average daily activity pattern?
Aggregate data by getting mean number of steps per interval (most active interval on average)
```{r}
data.timeMean <- aggregate(x = data[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data$interval))
```
Line plot to show mean number of steps at given time intervals
```{r}
plot(data.timeMean$interval, data.timeMean$steps, type = "l", xlab = "Time Interval",
ylab = "Mean Number of Steps", main = "Mean number of steps taken at measured time intervals")
```
Get interval with maximum number of steps
```{r}
interval_stepsMax <- data.timeMean[data.timeMean$steps == max(data.timeMean$steps),]$interval
```
## Inputing missing values
Strategy: separate data by day of the week and average the number of steps per given time
interval.  Use these averaged time interval values by day to replace appropriate NA values
Get count of NA values
```{r}
n_NA <- sum(is.na(data$steps))
```
Add day specification (Monday, Tuesday, Wednesday, etc...) to data points
```{r}
data$day <- weekdays(as.Date(data$date))
```
For non NA values, group data by day of the week and time interval, then find means of those groups
```{r}
data.dayInt <- data[complete.cases(data),] %>%
group_by(day, interval) %>%
summarize(meanSteps = mean(steps))
```
Make a copy of data and replace NA values with mean values grouped by day of week and time interval.
For some reason, this command needs to be run twice in order to update all of the NA values.
The last 288 don't get updated the first time, but do the second time.  Programming, am I right?
```{r}
data.replaceNa <- data
data.replaceNa$steps[is.na(data.replaceNa$steps)] <- data.dayInt$meanSteps[
match(data.replaceNa$day, data.dayInt$day)
& match(data.replaceNa$interval, data.dayInt$interval)
]
data.replaceNa$steps[is.na(data.replaceNa$steps)] <- data.dayInt$meanSteps[
match(data.replaceNa$day, data.dayInt$day)
& match(data.replaceNa$interval, data.dayInt$interval)
]
```
Aggregate data by getting mean number of steps per interval
```{r}
data.dateSumReplaceNa <- aggregate(x = data.replaceNa[c("steps")],
FUN = sum,
by = list(date = data.replaceNa$date))
```
Histogram of total steps
```{r}
hist(data.dateSumReplaceNa$steps, 15, xlab = "Total steps per day", main = "Histogram of total steps per day")
```
Get mean and median values of the total steps in a day
```{r}
stepsRepNa_mean <- mean(data.dateSumReplaceNa$steps, na.rm=TRUE)
stepsRepNa_median <- median(data.dateSumReplaceNa$steps, na.rm=TRUE)
```
Both mean and median values increased when replacing NA values with values averaged for
intervals as a function of the day of the week.
By putting in this missing data, we are strengthing the impact of days which contained the most NA values.
Data will skew more towards those days
```{r}
table(data[is.na(data$steps),]$day)
```
## Are there differences in activity patterns between weekdays and weekends?
New variable that indicates if the day is a weekday or a weekend
```{r}
data.replaceNa$weekday <- ifelse(substr(weekdays(as.Date(data.replaceNa$date)), 0,1) != 'S', "weekday", "weekend")
```
Split data from weekdays and weekends
```{r}
data.weekdays <- data.replaceNa[data.replaceNa$weekday == "weekday",]
data.weekends <- data.replaceNa[data.replaceNa$weekday == "weekend",]
data.meanWeekdays <- aggregate(x = data.weekdays[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data.weekdays$interval))
data.meanWeekends <- aggregate(x = data.weekends[c("steps")],
FUN = mean,
na.rm = TRUE,
by = list(interval = data.weekends$interval))
```
Set Plot Attributes and plot
```{r}
main_text <- "Mean number of steps taken at measured time intervals"
xlab_text <- "Time Interval"
ylab_text <- "Mean Number of Steps"
y_lim <- c(-5, 250)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1), oma = c( 0, 0, 2, 0 ))
plot(data.meanWeekdays$interval, data.meanWeekdays$steps, type = "l", xlab = xlab_text,
ylab = ylab_text, ylim = y_lim, main = "weekdays")
plot(data.meanWeekends$interval, data.meanWeekends$steps, type = "l", xlab = xlab_text,
ylab = ylab_text,ylim = y_lim, main = "weekends")
title( main_text, outer = TRUE )
par(old.par)
```
View(data)
View(data)
file_dl <- download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "StormData.csv.bz2")
library(sqldf)
file_dl <- download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", "StormData.csv.bz2")
data <- read.csv.sql("StormData.csv.bz2", "select * from file where EVTYPE='TORNADO'")
?read.csv.sql
data <- read.csv.sql("StormData.csv.bz2", "select * from file where EVTYPE='TORNADO'", header=T, sep=",")
data <- read.csv.sql("StormData.csv.bz2", "select * from file", header=T, sep=",")
data <- read.csv.sql("StormData.csv.bz2", "select * from file", header=T, sep=",")
data <- read.csv.sql("StormData.csv.bz2", sql="select * from file", header=T, sep=",")
library(sqldf)
data <- read.csv.sql("StormData.csv.bz2", sql="select * from file", header=T, sep=",")
?read.csv
?read.csv
data <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows=1000)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows=1000)
head(data)
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
library(dplyr)
filter(data, BGN_DATE > as.Date("12/31/1954", format = "%m/%d/%Y"))
data <- filter(data, BGN_DATE > as.Date("12/31/1954", format = "%m/%d/%Y"))
data <- read.csv("StormData.csv.bz2", header=T, sep=",")
# Convert factor to date
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
# Filter data before 1955, when only tornado data was collected
data <- filter(data, BGN_DATE > as.Date("12/31/1954", format = "%m/%d/%Y"))
summary(data$PROPDMG)
summary(data$PROPCASH)
summary(data$PROPDMGEXP)
data_sample <- data[sample(nrow(data), 400000), ]
View(data_sample)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", row.names= row_names)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", row.names= row_names)
library(dplyr)
row_names <- c("STATE", "BGN_DATE", "STATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP" )
row_names <- c("STATE", "BGN_DATE", "STATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
set.seed(42)
data_sample <- data[sample(nrow(data), 400000), ]
data <- read.csv("StormData.csv.bz2", header=T, sep=",", row.names= row_names)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows=1000)
row_names <- c(2, 7, 8, 23, 24, 25, 26, 27, 28)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", row.names= row_names)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", row.names= row_names, nrows=1000)
col_names <- c("STATE", "BGN_DATE", "STATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
#row_names <- c(2, 7, 8, 23, 24, 25, 26, 27, 28)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", col.names= col_names, nrows=1000)
col_names <- c("STATE", "BGN_DATE", "STATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
#row_names <- c(2, 7, 8, 23, 24, 25, 26, 27, 28)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", col.names= col_names, nrows=1000)
data <- read.csv("StormData.csv.bz2", header=T, sep=",",  nrows=1000)
?rep
col_classes <- c("NULL", "factor", "NULL","NULL","NULL", "NULL", "factor", "factor", rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "logical")
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=1000)
data-1 <- read.csv("StormData.csv.bz2", header=T, sep=",",  nrows=1000)
data_1 <- read.csv("StormData.csv.bz2", header=T, sep=",",  nrows=1000)
col_classes <- c("NULL", "factor", "NULL","NULL","NULL", "NULL", "factor", "factor", rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "logical", rep("NULL", 3))
col_classes <- c("NULL", "factor", "NULL","NULL","NULL", "NULL", "factor", "factor", rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "logical", rep("NULL", 3))
data_1 <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=1000)
col_names <- c("STATE", "BGN_DATE", "STATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
#row_names <- c(2, 7, 8, 23, 24, 25, 26, 27, 28)
col_classes <- c("NULL", "factor", "NULL","NULL","NULL", "NULL", "factor", "factor", rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "logical", rep("NULL", 4))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=1000)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows=1000)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=1000)
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "logical", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=1000)
summary(data$CROPDMGEXP)
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "logical", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes)
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "logical", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=1000)
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "factor", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=100000)
col_names <- c("STATE", "BGN_DATE", "STATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
#row_names <- c(2, 7, 8, 23, 24, 25, 26, 27, 28)
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "factor", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes, nrows=200000)
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes)
# Convert factor to date
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
# Filter data before 1955, when only tornado data was collected
data <- filter(data, BGN_DATE > as.Date("12/31/1954", format = "%m/%d/%Y"))
unique(data$EVTYPE)
data_2 <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows = 1000)
head(data_2)
?read.csv
data_2 <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows = 1000, skip=100000)
?read.csv
head(data_2)
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
# Filter data before 1996, when all event types began to be recorded
data <- filter(data, BGN_DATE > as.Date("12/31/1995", format = "%m/%d/%Y"))
ev_types <- read.csv("EVTYPE_Official.csv", header=F)
getwd()
setwd('./R/ReproducibleResearch')
ev_types <- read.csv("EVTYPE_Official.csv", header=F)
str(ev_types)
ev_types <- as.vector(ev_types['V1'])
ev_types2 <- as.vector(ev_types['V1'])
ev_types2 <- as.vector(ev_types[['V1']])
ev_types <- as.vector(ev_types[['V1']])
rm(ev_types)
ev_types <- as.vector(read.csv("EVTYPE_Official.csv", header=F)[['V1']])
data <- filter(data, EVTYPE %in% ev_types)
View(data)
View(data)
?filter
?to_upper
?toupper
ev_types <- toupper(ev_types)
ev_types <- as.vector(read.csv("EVTYPE_Official.csv", header=F)[['V1']])
ev_types <- toupper(ev_types)
# Only the following columns are required for our analysis:
## STATE, BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "factor", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes)
data_2 <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows = 1000, skip=100000)
# Convert factor to date
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
# Filter data before 1996, when all event types began to be recorded
data <- filter(data, BGN_DATE > as.Date("12/31/1995", format = "%m/%d/%Y"))
# Filter to only official EVTYPE values
data$EVTYPE <- toupper(data$EVTYPE)
data <- filter(data, EVTYPE %in% ev_types)
ev_types <- as.vector(read.csv("EVTYPE_Official.csv", header=F)[['V1']])
ev_types <- toupper(ev_types)
# Only the following columns are required for our analysis:
## STATE, BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "factor", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes)
data_2 <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows = 1000, skip=100000)
# Convert factor to date
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
# Filter data before 1996, when all event types began to be recorded
data <- filter(data, BGN_DATE > as.Date("12/31/1995", format = "%m/%d/%Y"))
# Filter to only official EVTYPE values
data$EVTYPE <- toupper(data$EVTYPE)
data <- filter(data, EVTYPE %in% ev_types)
ev_types <- as.vector(read.csv("EVTYPE_Official.csv", header=F)[['V1']])
ev_types <- toupper(ev_types)
# Only the following columns are required for our analysis:
## STATE, BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "factor", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", colClasses= col_classes)
data_2 <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows = 1000, skip=100000)
# Convert factor to date
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
# Filter data before 1996, when all event types began to be recorded
data <- filter(data, BGN_DATE > as.Date("12/31/1995", format = "%m/%d/%Y"))
# Filter to only official EVTYPE values
data$EVTYPE <- toupper(data$EVTYPE)
data_not <- filter(data, !EVTYPE %in% ev_types)
unique(data_not$EVTYPE)
# Get official event types, capitalize for easier comparison
ev_types <- as.vector(read.csv("EVTYPE_Official.csv", header=F)[['V1']])
ev_types <- toupper(ev_types)
# Only the following columns are required for our analysis:
## STATE, BGN_DATE, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP
col_classes <- c("NULL", "factor", rep("NULL", 4), rep("factor", 2), rep("NULL", 14), rep("numeric", 3), "factor", "numeric", "factor", rep("NULL", 9))
data <- read.csv("StormData.csv.bz2", header=T, sep=",", strip.white=TRUE, colClasses= col_classes)
data_2 <- read.csv("StormData.csv.bz2", header=T, sep=",", nrows = 1000, skip=100000)
# Convert factor to date
data$BGN_DATE <- as.Date(data$BGN_DATE, format = "%m/%d/%Y")
# Filter data before 1996, when all event types began to be recorded
data <- filter(data, BGN_DATE > as.Date("12/31/1995", format = "%m/%d/%Y"))
# Filter to only official EVTYPE values
data$EVTYPE <- toupper(data$EVTYPE)
data_not <- filter(data, !EVTYPE %in% ev_types)
